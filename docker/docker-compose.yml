version: "3.6"
services:
  web:
    image: "${COMPOSE_PROJECT_NAME}-web"
    environment:
      - API_URL=${API_URL}
      - WEB_BASE_HREF=${WEB_BASE_HREF}
      - IpFilterRules=${IpFilterRules}
      - RealIpFrom=${RealIpFrom}
    ports:
      - "${WEB_HTTP_PORT}:8080"
    depends_on:
      - api

  web-dev:
    image: "${COMPOSE_PROJECT_NAME}-web-dev"
    environment:
      - API_URL=${API_URL}
      - WEB_BASE_HREF=${WEB_BASE_HREF}
      - DEV_MODE=false
      - NODE_ENV=development
      - NPM_CONFIG_LOGLEVEL=notice
      - NPM_RUN=serve
    ports:
      - "${WEB_HTTP_PORT}:8080"
      - 5858:5858
    volumes:
      - "../web/src:/opt/app-root/src/src"
      - "../web/package.json:/opt/app-root/src/package.json"
    depends_on:
      - api
      - pdf

  #
  # api
  #-------------------------------------------------
  # The API performs the migrations on the database.
  # Therefore, it needs to come up after the database
  # has had time to fully initialize.
  #
  # We are using a simple sleep command to do this
  # for the moment; refer to the `command` section
  # of the configuration for details.  It would be
  # nice to implement a more deterministic solution.
  #
  api:
    image: "${COMPOSE_PROJECT_NAME}-api"
    environment:
      - DATABASE_SERVICE_NAME=${DATABASE_SERVICE_NAME}
      - DATABASE_ENGINE=${DATABASE_ENGINE}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - PDF_SERVICE_URL=${PDF_SERVICE_URL}
      - OVERRIDE_USER_ID=${OVERRIDE_USER_ID}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_LOG_LEVEL=${DJANGO_LOG_LEVEL}
      - DB_SERVICE_HOST=${DATABASE_SERVICE_NAME}
      - DB_SERVICE_PORT=5432
      - FRONT_END=${FRONT_END}
      - DATA_SECURITY_KEY=${DATA_SECURITY_KEY}
      - SITEMINDER_LOGOFF_URL=${SITEMINDER_LOGOFF_URL}
      - OIDC_RP_CLIENT_SECRET=${OIDC_RP_CLIENT_SECRET}
      - OIDC_RP_KC_IDP_HINT=${OIDC_RP_KC_IDP_HINT}
      - OIDC_RP_CLIENT_ID=${OIDC_RP_CLIENT_ID}
      - OIDC_RP_PROVIDER_ENDPOINT=${OIDC_RP_PROVIDER_ENDPOINT}
      - EFILING_HUB_API_BASE_URL=${EFILING_HUB_API_BASE_URL}
      - EFILING_HUB_KEYCLOAK_CLIENT_ID=${EFILING_HUB_KEYCLOAK_CLIENT_ID}
      - EFILING_HUB_KEYCLOAK_SECRET=${EFILING_HUB_KEYCLOAK_SECRET}
      - EFILING_HUB_KEYCLOAK_BASE_URL=${EFILING_HUB_KEYCLOAK_BASE_URL}
      - EFILING_HUB_KEYCLOAK_REALM=${EFILING_HUB_KEYCLOAK_REALM}
      - EFILING_ENABLED=${EFILING_ENABLED}
      - CHES_AUTH_URL=${CHES_AUTH_URL}
      - CHES_EMAIL_URL=${CHES_EMAIL_URL}
      - RECAPTCHA_SECRET_KEY=${RECAPTCHA_SECRET_KEY}
    volumes:
      - ../api/api:/opt/app-root/src/api
    ports:
      - "${API_HTTP_PORT}:8080"
      - 8000:8000 # For testing purposes
    depends_on:
      - db
    command: >
      /bin/bash -c "
        echo Waiting for the database service to start up ...;
        sleep 10;
        /usr/libexec/s2i/run;"

  #
  # schema-spy
  #-------------------------------------------------
  # Needs to wait for the schema to be created/migrated
  # by the API server; it's not enough to wait for the
  # database to be available.
  #
  # We are using a simple sleep command to do this
  # for the moment; refer to the `command` section
  # of the configuration for details.  It would be
  # nice to implement a more deterministic solution.
  #
  schema-spy:
    image: schema-spy
    environment:
      - DATABASE_SERVICE_NAME=${DATABASE_SERVICE_NAME}
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
      - POSTGRESQL_USER=${POSTGRESQL_USER}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
    ports:
      - 8082:8080
    depends_on:
      - db
    command: >
      /bin/sh -c "
        echo sleeping ...;
        sleep 20;
        ./start.sh;"
  #
  # db
  #
  db:
    image: centos/postgresql-12-centos7
    environment:
      - POSTGRESQL_USER=${POSTGRESQL_USER}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
      - POSTGRESQL_ADMIN_PASSWORD=${POSTGRESQL_ADMIN_PASSWORD}
    ports:
      - 5432:5432
    # volumes:
    # - data:/var/lib/pgsql/data


  pdf:
    image: bcgovimages/weasyprint
    ports:
      - 8083:5001

# volumes:
# data:
